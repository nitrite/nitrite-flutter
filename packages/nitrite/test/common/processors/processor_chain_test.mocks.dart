// Mocks generated by Mockito 5.2.0 from annotations
// in nitrite/test/common/processors/processor_chain_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nitrite/nitrite.dart' as _i2;
import 'package:nitrite/src/common/persistent_collection.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDocument_0 extends _i1.Fake implements _i2.Document {}

class _FakeWriteResult_1 extends _i1.Fake implements _i2.WriteResult {}

class _FakeDocumentCursor_2 extends _i1.Fake implements _i2.DocumentCursor {}

class _FakeNitriteStore_3<Config extends _i2.StoreConfig> extends _i1.Fake
    implements _i2.NitriteStore<Config> {}

class _FakeAttributes_4 extends _i1.Fake implements _i2.Attributes {}

/// A class which mocks [Processor].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessor extends _i1.Mock implements _i2.Processor {
  MockProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Document> processBeforeWrite(_i2.Document? document) =>
      (super.noSuchMethod(Invocation.method(#processBeforeWrite, [document]),
              returnValue: Future<_i2.Document>.value(_FakeDocument_0()))
          as _i3.Future<_i2.Document>);
  @override
  _i3.Future<_i2.Document> processAfterRead(_i2.Document? document) =>
      (super.noSuchMethod(Invocation.method(#processAfterRead, [document]),
              returnValue: Future<_i2.Document>.value(_FakeDocument_0()))
          as _i3.Future<_i2.Document>);
  @override
  _i3.Future<void> process(_i4.PersistentCollection<dynamic>? collection) =>
      (super.noSuchMethod(Invocation.method(#process, [collection]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [NitriteCollection].
///
/// See the documentation for Mockito's code generation for more information.
class MockNitriteCollection extends _i1.Mock implements _i2.NitriteCollection {
  MockNitriteCollection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i3.Future<bool> get isDropped =>
      (super.noSuchMethod(Invocation.getter(#isDropped),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> get isOpen => (super.noSuchMethod(Invocation.getter(#isOpen),
      returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<int> get size => (super.noSuchMethod(Invocation.getter(#size),
      returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<_i2.WriteResult> insert(List<_i2.Document>? documents) =>
      (super.noSuchMethod(Invocation.method(#insert, [documents]),
              returnValue: Future<_i2.WriteResult>.value(_FakeWriteResult_1()))
          as _i3.Future<_i2.WriteResult>);
  @override
  _i3.Future<_i2.WriteResult> updateOne(_i2.Document? document,
          [bool? insertIfAbsent = false]) =>
      (super.noSuchMethod(
              Invocation.method(#updateOne, [document, insertIfAbsent]),
              returnValue: Future<_i2.WriteResult>.value(_FakeWriteResult_1()))
          as _i3.Future<_i2.WriteResult>);
  @override
  _i3.Future<_i2.WriteResult> update(_i2.Filter? filter, _i2.Document? update,
          [_i2.UpdateOptions? updateOptions]) =>
      (super.noSuchMethod(
              Invocation.method(#update, [filter, update, updateOptions]),
              returnValue: Future<_i2.WriteResult>.value(_FakeWriteResult_1()))
          as _i3.Future<_i2.WriteResult>);
  @override
  _i3.Future<_i2.WriteResult> remove(_i2.Filter? filter,
          [bool? justOne = false]) =>
      (super.noSuchMethod(Invocation.method(#remove, [filter, justOne]),
              returnValue: Future<_i2.WriteResult>.value(_FakeWriteResult_1()))
          as _i3.Future<_i2.WriteResult>);
  @override
  _i3.Future<_i2.WriteResult> removeOne(_i2.Document? document) =>
      (super.noSuchMethod(Invocation.method(#removeOne, [document]),
              returnValue: Future<_i2.WriteResult>.value(_FakeWriteResult_1()))
          as _i3.Future<_i2.WriteResult>);
  @override
  _i3.Future<_i2.DocumentCursor> find(
          [_i2.Filter? filter, _i2.FindOptions? findOptions]) =>
      (super.noSuchMethod(Invocation.method(#find, [filter, findOptions]),
              returnValue:
                  Future<_i2.DocumentCursor>.value(_FakeDocumentCursor_2()))
          as _i3.Future<_i2.DocumentCursor>);
  @override
  _i3.Future<_i2.Document?> getById(_i2.NitriteId? id) => (super.noSuchMethod(
      Invocation.method(#getById, [id]),
      returnValue: Future<_i2.Document?>.value()) as _i3.Future<_i2.Document?>);
  @override
  _i3.Future<void> addProcessor(_i2.Processor? processor) =>
      (super.noSuchMethod(Invocation.method(#addProcessor, [processor]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> createIndex(List<String>? fields,
          [_i2.IndexOptions? indexOptions]) =>
      (super.noSuchMethod(
          Invocation.method(#createIndex, [fields, indexOptions]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> rebuildIndex(List<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#rebuildIndex, [fields]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<Iterable<_i2.IndexDescriptor>> listIndexes() =>
      (super.noSuchMethod(Invocation.method(#listIndexes, []),
              returnValue: Future<Iterable<_i2.IndexDescriptor>>.value(
                  <_i2.IndexDescriptor>[]))
          as _i3.Future<Iterable<_i2.IndexDescriptor>>);
  @override
  _i3.Future<bool> hasIndex(List<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#hasIndex, [fields]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> isIndexing(List<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#isIndexing, [fields]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> dropIndex(List<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#dropIndex, [fields]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> dropAllIndices() =>
      (super.noSuchMethod(Invocation.method(#dropAllIndices, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> drop() => (super.noSuchMethod(Invocation.method(#drop, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i2.NitriteStore<Config> getStore<Config extends _i2.StoreConfig>() =>
      (super.noSuchMethod(Invocation.method(#getStore, []),
              returnValue: _FakeNitriteStore_3<Config>())
          as _i2.NitriteStore<Config>);
  @override
  _i3.Future<void> subscribe<T>(_i2.CollectionEventListener<T>? listener) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [listener]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> unsubscribe<T>(_i2.CollectionEventListener<T>? listener) =>
      (super.noSuchMethod(Invocation.method(#unsubscribe, [listener]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i2.Attributes> getAttributes() =>
      (super.noSuchMethod(Invocation.method(#getAttributes, []),
              returnValue: Future<_i2.Attributes>.value(_FakeAttributes_4()))
          as _i3.Future<_i2.Attributes>);
  @override
  _i3.Future<void> setAttributes(_i2.Attributes? attributes) =>
      (super.noSuchMethod(Invocation.method(#setAttributes, [attributes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
