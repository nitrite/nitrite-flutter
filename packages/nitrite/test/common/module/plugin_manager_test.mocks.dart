// Mocks generated by Mockito 5.2.0 from annotations
// in nitrite/test/common/module/plugin_manager_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nitrite/nitrite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [NitriteModule].
///
/// See the documentation for Mockito's code generation for more information.
class MockNitriteModule extends _i1.Mock implements _i2.NitriteModule {
  MockNitriteModule() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<_i2.NitritePlugin> get plugins =>
      (super.noSuchMethod(Invocation.getter(#plugins),
          returnValue: <_i2.NitritePlugin>{}) as Set<_i2.NitritePlugin>);
}

/// A class which mocks [NitritePlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockNitritePlugin extends _i1.Mock implements _i2.NitritePlugin {
  MockNitritePlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize(_i2.NitriteConfig? nitriteConfig) =>
      (super.noSuchMethod(Invocation.method(#initialize, [nitriteConfig]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
