// Mocks generated by Mockito 5.2.0 from annotations
// in nitrite/test/common/stream/indexed_stream_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i2;
import 'package:nitrite/nitrite.dart' as _i1;
import 'package:nitrite/src/common/meta/attributes.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNitriteStore_0<Config extends _i1.StoreConfig> extends _i2.Fake
    implements _i1.NitriteStore<Config> {}

class _FakeAttributes_1 extends _i2.Fake implements _i3.Attributes {}

/// A class which mocks [NitriteMap].
///
/// See the documentation for Mockito's code generation for more information.
class MockNitriteMap<Key, Value> extends _i2.Mock
    implements _i1.NitriteMap<Key, Value> {
  MockNitriteMap() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isDropped =>
      (super.noSuchMethod(Invocation.getter(#isDropped), returnValue: false)
          as bool);
  @override
  _i4.Future<bool> containsKey(Key? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<Value?> operator [](Key? key) =>
      (super.noSuchMethod(Invocation.method(#[], [key]),
          returnValue: Future<Value?>.value()) as _i4.Future<Value?>);
  @override
  _i4.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Stream<Value> values() =>
      (super.noSuchMethod(Invocation.method(#values, []),
          returnValue: Stream<Value>.empty()) as _i4.Stream<Value>);
  @override
  _i4.Stream<Key> keys() => (super.noSuchMethod(Invocation.method(#keys, []),
      returnValue: Stream<Key>.empty()) as _i4.Stream<Key>);
  @override
  _i4.Future<Value?> remove(Key? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<Value?>.value()) as _i4.Future<Value?>);
  @override
  _i4.Future<void> put(Key? key, Value? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> size() => (super.noSuchMethod(Invocation.method(#size, []),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<Value?> putIfAbsent(Key? key, Value? value) =>
      (super.noSuchMethod(Invocation.method(#putIfAbsent, [key, value]),
          returnValue: Future<Value?>.value()) as _i4.Future<Value?>);
  @override
  _i4.Future<Key?> higherKey(Key? key) =>
      (super.noSuchMethod(Invocation.method(#higherKey, [key]),
          returnValue: Future<Key?>.value()) as _i4.Future<Key?>);
  @override
  _i4.Future<Key?> ceilingKey(Key? key) =>
      (super.noSuchMethod(Invocation.method(#ceilingKey, [key]),
          returnValue: Future<Key?>.value()) as _i4.Future<Key?>);
  @override
  _i4.Future<Key?> lowerKey(Key? key) =>
      (super.noSuchMethod(Invocation.method(#lowerKey, [key]),
          returnValue: Future<Key?>.value()) as _i4.Future<Key?>);
  @override
  _i4.Future<Key?> floorKey(Key? key) =>
      (super.noSuchMethod(Invocation.method(#floorKey, [key]),
          returnValue: Future<Key?>.value()) as _i4.Future<Key?>);
  @override
  _i4.Future<bool> isEmpty() =>
      (super.noSuchMethod(Invocation.method(#isEmpty, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i1.NitriteStore<Config> getStore<Config extends _i1.StoreConfig>() =>
      (super.noSuchMethod(Invocation.method(#getStore, []),
              returnValue: _FakeNitriteStore_0<Config>())
          as _i1.NitriteStore<Config>);
  @override
  _i4.Stream<_i1.Pair<Key, Value>> entries() =>
      (super.noSuchMethod(Invocation.method(#entries, []),
              returnValue: Stream<_i1.Pair<Key, Value>>.empty())
          as _i4.Stream<_i1.Pair<Key, Value>>);
  @override
  _i4.Stream<_i1.Pair<Key, Value>> reversedEntries() =>
      (super.noSuchMethod(Invocation.method(#reversedEntries, []),
              returnValue: Stream<_i1.Pair<Key, Value>>.empty())
          as _i4.Stream<_i1.Pair<Key, Value>>);
  @override
  _i4.Future<void> drop() => (super.noSuchMethod(Invocation.method(#drop, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i3.Attributes> getAttributes() =>
      (super.noSuchMethod(Invocation.method(#getAttributes, []),
              returnValue: Future<_i3.Attributes>.value(_FakeAttributes_1()))
          as _i4.Future<_i3.Attributes>);
  @override
  _i4.Future<void> setAttributes(_i3.Attributes? attributes) =>
      (super.noSuchMethod(Invocation.method(#setAttributes, [attributes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateLastModifiedTime() =>
      (super.noSuchMethod(Invocation.method(#updateLastModifiedTime, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
