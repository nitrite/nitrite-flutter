// Mocks generated by Mockito 5.3.2 from annotations
// in nitrite/test/collection/operation/doc_index_write_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:collection' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nitrite/nitrite.dart' as _i3;
import 'package:nitrite/src/collection/operations/index_operations.dart' as _i4;
import 'package:nitrite/src/common/module/plugin_manager.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePluginManager_0 extends _i1.SmartFake implements _i2.PluginManager {
  _FakePluginManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNitriteMapper_1 extends _i1.SmartFake implements _i3.NitriteMapper {
  _FakeNitriteMapper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNitriteConfig_2 extends _i1.SmartFake implements _i3.NitriteConfig {
  _FakeNitriteConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNitriteIndexer_3 extends _i1.SmartFake
    implements _i3.NitriteIndexer {
  _FakeNitriteIndexer_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNitriteStore_4<Config extends _i3.StoreConfig> extends _i1.SmartFake
    implements _i3.NitriteStore<Config> {
  _FakeNitriteStore_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IndexOperations].
///
/// See the documentation for Mockito's code generation for more information.
class MockIndexOperations extends _i1.Mock implements _i4.IndexOperations {
  MockIndexOperations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> createIndex(
    _i3.Fields? fields,
    String? indexType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createIndex,
          [
            fields,
            indexType,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> buildIndex(
    _i3.IndexDescriptor? indexDescriptor,
    bool? rebuild,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildIndex,
          [
            indexDescriptor,
            rebuild,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> dropAllIndices() => (super.noSuchMethod(
        Invocation.method(
          #dropAllIndices,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> dropIndex(_i3.Fields? fields) => (super.noSuchMethod(
        Invocation.method(
          #dropIndex,
          [fields],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<bool> hasIndexEntry(_i3.Fields? fields) => (super.noSuchMethod(
        Invocation.method(
          #hasIndexEntry,
          [fields],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> isIndexing(_i3.Fields? fields) => (super.noSuchMethod(
        Invocation.method(
          #isIndexing,
          [fields],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<Iterable<_i3.IndexDescriptor>> listIndexes() =>
      (super.noSuchMethod(
        Invocation.method(
          #listIndexes,
          [],
        ),
        returnValue: _i5.Future<Iterable<_i3.IndexDescriptor>>.value(
            <_i3.IndexDescriptor>[]),
      ) as _i5.Future<Iterable<_i3.IndexDescriptor>>);
  @override
  _i5.Future<_i3.IndexDescriptor?> findIndexDescriptor(_i3.Fields? fields) =>
      (super.noSuchMethod(
        Invocation.method(
          #findIndexDescriptor,
          [fields],
        ),
        returnValue: _i5.Future<_i3.IndexDescriptor?>.value(),
      ) as _i5.Future<_i3.IndexDescriptor?>);
  @override
  _i5.Future<bool> shouldRebuildIndex(_i3.Fields? fields) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldRebuildIndex,
          [fields],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NitriteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockNitriteConfig extends _i1.Mock implements _i3.NitriteConfig {
  MockNitriteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<int, _i6.SplayTreeMap<int, _i3.Migration>> get migrations =>
      (super.noSuchMethod(
        Invocation.getter(#migrations),
        returnValue: <int, _i6.SplayTreeMap<int, _i3.Migration>>{},
      ) as Map<int, _i6.SplayTreeMap<int, _i3.Migration>>);
  @override
  _i2.PluginManager get pluginManager => (super.noSuchMethod(
        Invocation.getter(#pluginManager),
        returnValue: _FakePluginManager_0(
          this,
          Invocation.getter(#pluginManager),
        ),
      ) as _i2.PluginManager);
  @override
  int get schemaVersion => (super.noSuchMethod(
        Invocation.getter(#schemaVersion),
        returnValue: 0,
      ) as int);
  @override
  _i3.NitriteMapper get nitriteMapper => (super.noSuchMethod(
        Invocation.getter(#nitriteMapper),
        returnValue: _FakeNitriteMapper_1(
          this,
          Invocation.getter(#nitriteMapper),
        ),
      ) as _i3.NitriteMapper);
  @override
  void setFieldSeparator(String? fieldSeparator) => super.noSuchMethod(
        Invocation.method(
          #setFieldSeparator,
          [fieldSeparator],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.NitriteConfig> loadModule(_i3.NitriteModule? module) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadModule,
          [module],
        ),
        returnValue: _i5.Future<_i3.NitriteConfig>.value(_FakeNitriteConfig_2(
          this,
          Invocation.method(
            #loadModule,
            [module],
          ),
        )),
      ) as _i5.Future<_i3.NitriteConfig>);
  @override
  _i3.NitriteConfig addMigration(_i3.Migration? migration) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMigration,
          [migration],
        ),
        returnValue: _FakeNitriteConfig_2(
          this,
          Invocation.method(
            #addMigration,
            [migration],
          ),
        ),
      ) as _i3.NitriteConfig);
  @override
  _i3.NitriteConfig currentSchemaVersion(int? version) => (super.noSuchMethod(
        Invocation.method(
          #currentSchemaVersion,
          [version],
        ),
        returnValue: _FakeNitriteConfig_2(
          this,
          Invocation.method(
            #currentSchemaVersion,
            [version],
          ),
        ),
      ) as _i3.NitriteConfig);
  @override
  _i5.Future<void> autoConfigure() => (super.noSuchMethod(
        Invocation.method(
          #autoConfigure,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i3.NitriteIndexer> findIndexer(String? indexType) =>
      (super.noSuchMethod(
        Invocation.method(
          #findIndexer,
          [indexType],
        ),
        returnValue: _i5.Future<_i3.NitriteIndexer>.value(_FakeNitriteIndexer_3(
          this,
          Invocation.method(
            #findIndexer,
            [indexType],
          ),
        )),
      ) as _i5.Future<_i3.NitriteIndexer>);
  @override
  _i3.NitriteStore<Config> getNitriteStore<Config extends _i3.StoreConfig>() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNitriteStore,
          [],
        ),
        returnValue: _FakeNitriteStore_4<Config>(
          this,
          Invocation.method(
            #getNitriteStore,
            [],
          ),
        ),
      ) as _i3.NitriteStore<Config>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
