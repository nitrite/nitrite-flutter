// Mocks generated by Mockito 5.2.0 from annotations
// in nitrite/test/collection/operation/read_operation_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nitrite/nitrite.dart' as _i2;
import 'package:nitrite/src/collection/operations/index_operations.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFilter_0 extends _i1.Fake implements _i2.Filter {}

/// A class which mocks [IndexOperations].
///
/// See the documentation for Mockito's code generation for more information.
class MockIndexOperations extends _i1.Mock implements _i3.IndexOperations {
  MockIndexOperations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> createIndex(_i2.Fields? fields, String? indexType) =>
      (super.noSuchMethod(Invocation.method(#createIndex, [fields, indexType]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> buildIndex(
          _i2.IndexDescriptor? indexDescriptor, bool? rebuild) =>
      (super.noSuchMethod(
          Invocation.method(#buildIndex, [indexDescriptor, rebuild]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> dropAllIndices() =>
      (super.noSuchMethod(Invocation.method(#dropAllIndices, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> dropIndex(_i2.Fields? fields) =>
      (super.noSuchMethod(Invocation.method(#dropIndex, [fields]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> hasIndexEntry(_i2.Fields? fields) =>
      (super.noSuchMethod(Invocation.method(#hasIndexEntry, [fields]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isIndexing(_i2.Fields? fields) =>
      (super.noSuchMethod(Invocation.method(#isIndexing, [fields]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<Iterable<_i2.IndexDescriptor>> listIndexes() =>
      (super.noSuchMethod(Invocation.method(#listIndexes, []),
              returnValue: Future<Iterable<_i2.IndexDescriptor>>.value(
                  <_i2.IndexDescriptor>[]))
          as _i4.Future<Iterable<_i2.IndexDescriptor>>);
  @override
  _i4.Future<_i2.IndexDescriptor?> findIndexDescriptor(_i2.Fields? fields) =>
      (super.noSuchMethod(Invocation.method(#findIndexDescriptor, [fields]),
              returnValue: Future<_i2.IndexDescriptor?>.value())
          as _i4.Future<_i2.IndexDescriptor?>);
  @override
  _i4.Future<bool> shouldRebuildIndex(_i2.Fields? fields) =>
      (super.noSuchMethod(Invocation.method(#shouldRebuildIndex, [fields]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [Filter].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilter extends _i1.Mock implements _i2.Filter {
  MockFilter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool apply(_i2.Document? doc) =>
      (super.noSuchMethod(Invocation.method(#apply, [doc]), returnValue: false)
          as bool);
  @override
  _i2.Filter operator ~() => (super.noSuchMethod(Invocation.method(#~, []),
      returnValue: _FakeFilter_0()) as _i2.Filter);
}
