import 'package:nitrite/nitrite.dart';
import 'package:nitrite/src/migration/instructions.dart';
import 'package:nitrite/src/migration/migration.dart';

/// Represents a migration instruction set for [NitriteCollection].
abstract class CollectionInstruction implements Instruction {
  /// The name of the collection for this instruction.
  String get collectionName;

  /// Adds an instruction to rename a [NitriteCollection].
  CollectionInstruction rename(String name) {
    MigrationStep migrationStep =
        MigrationStep(InstructionType.collectionRename, (collectionName, name));
    addStep(migrationStep);
    return _DelegatedInstruction(this);
  }

  /// Adds an instruction to add a new field with either a default value
  /// or a value generator, into the document of a [NitriteCollection].
  ///
  /// If the [generator] is not null, the value of the field will be
  /// generated by the [generator] function.
  CollectionInstruction addField(String fieldName,
      {dynamic defaultValue, Generator? generator}) {
    dynamic argument = generator == null
        ? (collectionName, fieldName, defaultValue)
        : (collectionName, fieldName, generator);
    MigrationStep migrationStep =
        MigrationStep(InstructionType.collectionAddField, argument);
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to rename a field to the document of
  /// a [NitriteCollection].
  CollectionInstruction renameField(String oldName, String newName) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.collectionRenameField,
        (collectionName, oldName, newName));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to delete a field from the document of
  /// a [NitriteCollection].
  CollectionInstruction deleteField(String fieldName) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.collectionDeleteField, (collectionName, fieldName));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to drop an index from a [NitriteCollection].
  CollectionInstruction dropIndex(List<String> indexedFieldNames) {
    Fields indexedFields = Fields.withNames(indexedFieldNames);
    MigrationStep migrationStep = MigrationStep(
        InstructionType.collectionDropIndex, (collectionName, indexedFields));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to drop all indices from a [NitriteCollection].
  CollectionInstruction dropAllIndices() {
    MigrationStep migrationStep =
        MigrationStep(InstructionType.collectionDropIndices, collectionName);
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to create an index in a [NitriteCollection].
  CollectionInstruction createIndex(String indexType, List<String> fieldNames) {
    Fields indexedFields = Fields.withNames(fieldNames);
    MigrationStep migrationStep = MigrationStep(
        InstructionType.collectionCreateIndex,
        (collectionName, indexedFields, indexType));
    addStep(migrationStep);
    return this;
  }
}

class _DelegatedInstruction extends CollectionInstruction {
  final String _collectionName;
  final CollectionInstruction _delegate;

  _DelegatedInstruction(this._delegate)
      : _collectionName = _delegate.collectionName;

  @override
  String get collectionName => _collectionName;

  @override
  void addStep(MigrationStep step) {
    _delegate.addStep(step);
  }
}
