import 'package:nitrite/nitrite.dart';
import 'package:nitrite/src/migration/instructions.dart';
import 'package:nitrite/src/migration/migration.dart';

/// Represents a default value generator for the document fields
/// during field manipulation instruction.
typedef Generator = dynamic Function(Document document);

/// Represents a type converter. It converts an object of a certain type
/// to an object of another type.
typedef TypeConverter = dynamic Function(dynamic value);

/// Represents a migration instruction set for [ObjectRepository].
abstract class RepositoryInstruction implements Instruction {
  /// The entity name of the [ObjectRepository].
  String get entityName;

  /// The key of the [ObjectRepository].
  String? get key;

  /// Adds an instruction to rename the [ObjectRepository].
  RepositoryInstruction renameRepository(String entityName, {String? key}) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.renameRepository,
        Quartet(this.entityName, this.key, entityName, key));
    addStep(migrationStep);
    return _DelegatedInstruction(this, entityName, key);
  }

  /// Adds an instruction to add new field with either a default value
  /// or a value generator, into the entity in the [ObjectRepository].
  ///
  /// If the [generator] is not null, the value of the field will be
  /// generated by the [generator] function.
  RepositoryInstruction addField(String fieldName,
      {dynamic defaultValue, Generator? generator}) {
    MigrationStep migrationStep = generator == null
        ? MigrationStep(InstructionType.repositoryAddField,
            Quartet(entityName, key, fieldName, generator))
        : MigrationStep(InstructionType.repositoryAddField,
            Quartet(entityName, key, fieldName, defaultValue));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to rename a field to the entity in
  /// the [ObjectRepository].
  RepositoryInstruction renameField(String oldName, String newName) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryRenameField,
        Quartet(entityName, key, oldName, newName));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to delete a field from the entity in
  /// the [ObjectRepository].
  RepositoryInstruction deleteField(String fieldName) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryDeleteField,
        Triplet(entityName, key, fieldName));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to change the datatype of a field of the entity in
  /// the [ObjectRepository].
  RepositoryInstruction changeDataType(
      String fieldName, TypeConverter converter) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryChangeDataType,
        Quartet(entityName, key, fieldName, converter));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to change the id field of an entity in the
  /// [ObjectRepository].
  RepositoryInstruction changeIdField(Fields oldField, Fields newField) {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryChangeIdField,
        Quartet(entityName, key, oldField, newField));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to drop an index from the [ObjectRepository].
  RepositoryInstruction dropIndex(List<String> fieldNames) {
    Fields fields = Fields.withNames(fieldNames);
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryDropIndex, Triplet(entityName, key, fields));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to drop all indices from the [ObjectRepository].
  RepositoryInstruction dropAllIndices() {
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryDropIndices, Pair(entityName, key));
    addStep(migrationStep);
    return this;
  }

  /// Adds an instruction to create an index in the [ObjectRepository].
  RepositoryInstruction createIndex(String indexType, List<String> fieldNames) {
    Fields fields = Fields.withNames(fieldNames);
    MigrationStep migrationStep = MigrationStep(
        InstructionType.repositoryCreateIndex,
        Quartet(entityName, key, fields, indexType));
    addStep(migrationStep);
    return this;
  }
}

class _DelegatedInstruction extends RepositoryInstruction {
  final String _entityName;
  final String? _key;
  final RepositoryInstruction _delegate;

  @override
  String get entityName => _entityName;

  @override
  String? get key => _key;

  _DelegatedInstruction(this._delegate, this._entityName, this._key);

  @override
  void addStep(MigrationStep step) {
    _delegate.addStep(step);
  }
}
